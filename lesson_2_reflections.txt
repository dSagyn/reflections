What happens when you initialize a repository? Why do you need to do it?
	Initializing a repository means creating a .git file in the directory you initialized your repository. You can the check the status of your repo with "git status".

How is the staging area different from the working directory and the repository?
What value do you think it offers?
	It is a separate state that git puts a file into before it will commit it. It allows you to check the status of a file before you add it to a commit.

How can you use the staging area to make sure you have one commit per logical
change?
	You can stage one file you changed and commit it. Then you can commit it. After that, you can stage the next change and so forth. If you want to remember the changes you have made before you commit, you can use "git diff" without id's to find differences between the directory and staging area.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?
	Branches help in situations where you want to work on an experimental feature which is still not a part of the main file. They may also be used if you want to make alternate versions of your project (for example a version in Italian).

How do the diagrams help you visualize the branch structure?
	They allow you to see which commits are reachable and which commits are isolated in case you want to save them by creating a new branch.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?